// Generated by Xata Codegen 0.25.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "nextauth_users",
    columns: [
      { name: "email", type: "email" },
      { name: "emailVerified", type: "datetime" },
      { name: "name", type: "string" },
      { name: "image", type: "string" },
    ],
    revLinks: [
      { column: "user", table: "nextauth_accounts" },
      { column: "user", table: "nextauth_users_accounts" },
      { column: "user", table: "nextauth_users_sessions" },
      { column: "user", table: "nextauth_sessions" },
    ],
  },
  {
    name: "nextauth_accounts",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "type", type: "string" },
      { name: "provider", type: "string" },
      { name: "providerAccountId", type: "string" },
      { name: "refresh_token", type: "string" },
      { name: "access_token", type: "string" },
      { name: "expires_at", type: "int" },
      { name: "token_type", type: "string" },
      { name: "scope", type: "string" },
      { name: "id_token", type: "text" },
      { name: "session_state", type: "string" },
    ],
    revLinks: [{ column: "account", table: "nextauth_users_accounts" }],
  },
  {
    name: "nextauth_verificationTokens",
    columns: [
      { name: "identifier", type: "string" },
      { name: "token", type: "string" },
      { name: "expires", type: "datetime" },
    ],
  },
  {
    name: "nextauth_users_accounts",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "account", type: "link", link: { table: "nextauth_accounts" } },
    ],
  },
  {
    name: "nextauth_users_sessions",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "session", type: "link", link: { table: "nextauth_sessions" } },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Universidad de Ingeniería y Tecnología",
      },
    ],
  },
  {
    name: "nextauth_sessions",
    columns: [
      { name: "sessionToken", type: "string" },
      { name: "expires", type: "datetime" },
      { name: "user", type: "link", link: { table: "nextauth_users" } },
    ],
    revLinks: [{ column: "session", table: "nextauth_users_sessions" }],
  },
  {
    name: "school",
    columns: [
      { name: "domain", type: "string", unique: true },
      { name: "handle", type: "string", unique: true },
      { name: "student_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Universidad de Ingeniería y Tecnología",
      },
    ],
    revLinks: [{ column: "school", table: "profile" }],
  },
  {
    name: "profile",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "handle", type: "string", unique: true },
      { name: "name", type: "string" },
      { name: "bio", type: "string" },
      { name: "profile_picture", type: "string" },
      { name: "cover_picture", type: "string" },
      { name: "ig_handle", type: "string" },
      { name: "tw_handle", type: "string" },
      { name: "gh_handle", type: "string" },
      { name: "embedding", type: "vector", vector: { dimension: 1536 } },
      { name: "follower_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "following_count",
        type: "int",
        notNull: true,
        defaultValue: "0",
      },
      { name: "like_count", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "birth_of_date",
        type: "datetime",
        notNull: true,
        defaultValue: "2001-11-30T00:00:00.000Z",
      },
      { name: "school", type: "link", link: { table: "school" } },
    ],
    revLinks: [
      { column: "profile_a", table: "rel_profiles" },
      { column: "profile_b", table: "rel_profiles" },
      { column: "author_profile", table: "status" },
    ],
  },
  {
    name: "rel_profiles",
    columns: [
      { name: "profile_a", type: "link", link: { table: "profile" } },
      { name: "profile_b", type: "link", link: { table: "profile" } },
      {
        name: "a_follows_b",
        type: "bool",
        notNull: true,
        defaultValue: "false",
      },
    ],
  },
  {
    name: "status",
    columns: [
      { name: "embedding", type: "vector", vector: { dimension: 1536 } },
      { name: "author_profile", type: "link", link: { table: "profile" } },
      { name: "like_count", type: "int" },
      { name: "body", type: "string" },
      { name: "reply_to", type: "link", link: { table: "status" } },
      { name: "quote_from", type: "link", link: { table: "status" } },
    ],
    revLinks: [
      { column: "reply_to", table: "status" },
      { column: "quote_from", table: "status" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type NextauthUsers = InferredTypes["nextauth_users"];
export type NextauthUsersRecord = NextauthUsers & XataRecord;

export type NextauthAccounts = InferredTypes["nextauth_accounts"];
export type NextauthAccountsRecord = NextauthAccounts & XataRecord;

export type NextauthVerificationTokens =
  InferredTypes["nextauth_verificationTokens"];
export type NextauthVerificationTokensRecord = NextauthVerificationTokens &
  XataRecord;

export type NextauthUsersAccounts = InferredTypes["nextauth_users_accounts"];
export type NextauthUsersAccountsRecord = NextauthUsersAccounts & XataRecord;

export type NextauthUsersSessions = InferredTypes["nextauth_users_sessions"];
export type NextauthUsersSessionsRecord = NextauthUsersSessions & XataRecord;

export type NextauthSessions = InferredTypes["nextauth_sessions"];
export type NextauthSessionsRecord = NextauthSessions & XataRecord;

export type School = InferredTypes["school"];
export type SchoolRecord = School & XataRecord;

export type Profile = InferredTypes["profile"];
export type ProfileRecord = Profile & XataRecord;

export type RelProfiles = InferredTypes["rel_profiles"];
export type RelProfilesRecord = RelProfiles & XataRecord;

export type Status = InferredTypes["status"];
export type StatusRecord = Status & XataRecord;

export type DatabaseSchema = {
  nextauth_users: NextauthUsersRecord;
  nextauth_accounts: NextauthAccountsRecord;
  nextauth_verificationTokens: NextauthVerificationTokensRecord;
  nextauth_users_accounts: NextauthUsersAccountsRecord;
  nextauth_users_sessions: NextauthUsersSessionsRecord;
  nextauth_sessions: NextauthSessionsRecord;
  school: SchoolRecord;
  profile: ProfileRecord;
  rel_profiles: RelProfilesRecord;
  status: StatusRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://classhub-0lo8ap.us-east-1.xata.sh/db/classhub",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
